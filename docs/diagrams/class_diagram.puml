@startuml
'————————————————————————————————————
' Diagrama de Clases - Retail Sales Analysis
' Nivel: Senior | Estilo: Elegante y Profesional
'————————————————————————————————————

skinparam class {
  BackgroundColor Snow
  ArrowColor SteelBlue
  BorderColor LightSteelBlue
  RoundCorner 10
}

' Paquetes de dominio
package "Domain" {
  class Sale {
    - saleId: int
    - date: LocalDate
    - quantity: int
    - totalAmount: float
    + getSaleDate(): LocalDate
    + getTotalAmount(): float
  }
  class Product {
    - productId: int
    - name: String
    - category: String
    - price: float
    + getPrice(): float
    + applyDiscount(discount: float): void
  }
  class Store {
    - storeId: int
    - name: String
    - location: String
    + getInventoryLevel(product: Product): int
  }
  class Promotion {
    - promoId: int
    - description: String
    - startDate: LocalDate
    - endDate: LocalDate
    - discountRate: float
    + isActive(date: LocalDate): boolean
  }
}

' Asociaciones de Dominio
Sale "1" --> "1" Product : contains >
Sale "1" --> "1" Store   : soldAt >
Sale "0..1" --> "1" Promotion : uses >

' Paquete de Ingestión
package "src.ingestion" {
  class CSVReader {
    + read(path: String): DataFrame
  }
  class DBConnector {
    + connect(connString: String): Connection
    + fetch(query: String): DataFrame
  }
  class DataLoader {
    + loadFromCSV(path: String): DataFrame
    + loadFromDB(conn: Connection, query: String): DataFrame
  }
}
DataLoader ..> CSVReader
DataLoader ..> DBConnector

' Paquete de Limpieza
package "src.cleaning" {
  class DataCleaner {
    + fillMissing(df: DataFrame): DataFrame
    + removeOutliers(df: DataFrame): DataFrame
  }
  class OutlierDetector {
    - method: String
    + detect(df: DataFrame): List<Row>
  }
}
DataCleaner ..> OutlierDetector
DataCleaner ..> DataLoader

' Paquete de Análisis
package "src.analysis" {
  class EDAAnalyzer {
    + summaryStatistics(df: DataFrame): Report
    + correlationMatrix(df: DataFrame): Matrix
  }
  class TrendDetector {
    + detectSeasonality(df: DataFrame): SeasonalityReport
    + detectAnomalies(df: DataFrame): List<Date>
  }
}
TrendDetector ..> EDAAnalyzer
EDAAnalyzer ..> DataCleaner

' Paquete de Modelado
package "src.modeling" {
  abstract class TimeSeriesModeler {
    - data: DataFrame
    + fit(df: DataFrame): void
    + predict(steps: int): DataFrame
  }
  class ARIMAModel extends TimeSeriesModeler {
    - p: int
    - d: int
    - q: int
    + fit(df: DataFrame): void
    + predict(steps: int): DataFrame
  }
  class ProphetModel extends TimeSeriesModeler {
    + fit(df: DataFrame): void
    + predict(steps: int): DataFrame
  }
  class ForecastService {
    + generateForecast(df: DataFrame, modelType: String): DataFrame
  }
}
ForecastService ..> TimeSeriesModeler
ARIMAModel --|> TimeSeriesModeler
ProphetModel --|> TimeSeriesModeler
TimeSeriesModeler ..> TrendDetector

' Paquete de Visualización
package "src.visualization" {
  class PlotGenerator {
    + plotTimeSeries(df: DataFrame): Chart
    + plotHeatmap(df: DataFrame): Chart
  }
  class DashboardRenderer {
    + renderPlots(plots: List<Chart>): WebDashboard
    + exportToHTML(path: String): void
  }
}
PlotGenerator ..> EDAAnalyzer
PlotGenerator ..> ForecastService
DashboardRenderer ..> PlotGenerator

' Paquete de Utilidades
package "src.utils" {
  class Logger {
    + info(msg: String): void
    + error(msg: String): void
  }
  class ConfigManager {
    + load(configPath: String): Config
  }
}
' Dependencias transversales
Logger <..> DataLoader
Logger <..> DataCleaner
Logger <..> EDAAnalyzer
Logger <..> ForecastService
Logger <..> DashboardRenderer
ConfigManager <..> DataLoader
ConfigManager <..> ForecastService

@enduml
